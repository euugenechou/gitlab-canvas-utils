#!/usr/bin/env python3

from canvasapi import Canvas
from os.path import expanduser
import argparse, csv, toml, os, re, sys

def create_student_csv(course, base_gitlab_url, start, end, all):
    '''
    Writes the course student roster as a CSV file.
    Each row formatted as: [name, CanvasID, CruzID, repo].
    '''
    students = []
    roles = ['student']
    states = ['active']

    # These roles should grab everyone on the Canvas roster, not just students.
    if all:
        roles += ['ta', 'teacher', 'observer']

    # Use login ID instead of user ID to get email.
    # The regex match on cruzid should always succeed, provided a proper email.
    for user in course.get_users(enrollment_type=roles, enrollment_state=states):
        name = user.sortable_name
        canvasid = user.id
        email = user.login_id
        cruzid = re.search(r'(.*?)(\+.*?)?@ucsc.edu', email).group(1)
        repo = os.path.join(base_gitlab_url, f"{cruzid}.git")
        students.append((name, canvasid, cruzid, repo))

    # We start writing when we reach the start cruzid.
    # If there isn't a specified start, we write immediately.
    write = True if not start else False

    # Sort students by name in increasing lexographic order, then write them out.
    students.sort(key=lambda s: s[0])
    writer = csv.writer(sys.stdout, delimiter=",")
    for name, canvasid, cruzid, repo in students:
        # If we reach the start, we know to start writing.
        # Having the check for end after writing allows the end cruzid to be written as well.
        if cruzid == start:
            write = True
        if write:
            # This may result in a broken pipe error with head, which is fine.
            writer.writerow([name, canvasid, cruzid, repo])
        if cruzid == end:
            write = False
            break # We know we're done at this point.

def main():
    parser = argparse.ArgumentParser(
        formatter_class=argparse.RawTextHelpFormatter,
        description=(
            "Outputs CSV of entire Canvas course roster in lexicographic name order to stdout.\n"
            "This ordering applies when restricting to range of students by CruzID.\n"
            "This is by design because CruzIDs are easier to enter than full names.\n"
            "Each row in the CSV is formatted as: [name, CanvasID, CruzID, repo]."
        )
    )
    parser.add_argument(
        "-s", "--start", nargs="?", default=None,
        help="first CruzID to start CSV output from"
    )
    parser.add_argument(
        "-e", "--end", nargs="?", default=None,
        help="last CruzID to end CSV output with"
    )
    parser.add_argument(
        "-r", "--range", nargs="?", default=None,
        help="range of CruzID to output (example: --range=start,end)"
    )
    parser.add_argument(
        "-a", "--all", default=False, action="store_true",
        help="consider all roles when scraping the Canvas roster"
    )
    args = parser.parse_args()

    # Load the user's course and Canvas configuration.
    config = toml.load(f"{expanduser('~')}/.config/gcu/config.toml")
    canvas_url = config["canvas_url"]
    canvas_course_id = config["canvas_course_id"]
    canvas_token = config["canvas_token"]
    course = config["course"]
    quarter = config["quarter"]
    year = config["year"]
    canvas = Canvas(canvas_url, canvas_token)
    canvas_course = canvas.get_course(canvas_course_id)

    # This assumes that the GitLab project is created using the repocreator script.
    # Otherwise, the base GitLab url will change.
    base_gitlab_url = f"git@git.ucsc.edu:{course}/{quarter}{year}/"

    # Some basic parsing of the range option.
    if args.range:
        idrange = args.range.split(',')
        args.start, args.end = idrange[0], idrange[1]

    create_student_csv(canvas_course, base_gitlab_url, args.start, args.end, args.all)

if __name__ == "__main__":
    main()
