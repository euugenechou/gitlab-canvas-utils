#!/usr/bin/env python3

from git import Repo, Actor
import argparse, csv, os, sys, logging, shutil

repo_ops = {
    "pushed": 0,
    "errors": 0
}

def push_to_repo(files, cruzid, repodir, msg, author = None):
    """
    Pushes a list of files to a student's repo.
    Returns true if the files were added, committed, and pushed without error.
    """
    repopath = os.path.join(repodir, cruzid)
    if not os.path.exists(repopath):
        logging.error(f"{cruzid}: repo not cloned")
        return False

    repo = Repo(repopath)

    # Copy each file to the repo, creating directories if needed.
    # Then alter/update file paths.
    for file in files:
        path = os.path.join(repopath, file)
        os.makedirs(os.path.dirname(path), exist_ok=True)
        shutil.copyfile(file, path)
    files = [os.path.join(repopath, file) for file in files]

    try:
        logging.info(f"{cruzid}: adding: {files}")
        repo.index.add(files)
    except:
        repo_ops["errors"] += 1
        return False

    try:
        logging.info(f"{cruzid}: committing: {files}")
        if msg is None:
            msg = f"adding: {files}"
        repo.index.commit(msg, author = author, committer = author)
    except:
        repo_ops["errors"] += 1
        return False

    try:
        logging.info(f"{cruzid}: pushing: {files}")
        origin = repo.remote(name="origin")
        origin.push()
        repo_ops["pushed"] += 1
    except:
        repo_ops["errors"] += 1
        return False

    return True

def main():
    parser = argparse.ArgumentParser(
        formatter_class=argparse.RawTextHelpFormatter,
        description=(
            "Pushes a set of files to student repos.\n"
            "The student repos to add the files to must be cloned.\n"
            "Unless otherwise specified, the repos are assumed to be cloned under /tmp/repos.\n"
            "Reads stdin for a CSV with rows formatted as [name, CanvasID, CruzID, repo].\n"
            "Outputs CSV rows of students whose repos have been updated to stdout.\n"
        )
    )
    parser.add_argument(
        "-c", "--commit-message", default=None, nargs="?", type=str,
        help="the commit message for files to push"
    )
    parser.add_argument(
        "-r", "--repodir", nargs="?", default="/tmp/repos",
        help="the directory that contains the cloned repos (default: /tmp/repos)"
    )
    parser.add_argument(
        "-v", "--verbose", default=False, action="store_true",
        help="print verbose statistics to stderr"
    )
    parser.add_argument(
        "-l", "--logging-level", default="INFO",
        choices=['debug', 'info', 'warning', 'error', 'critical', 'off'],
        help="set logging level for logs to stderr"
    )
    parser.add_argument(
        "files", nargs="*", default=[],
        help="list of files to push to student repositories"
    )
    parser.add_argument(
        "-a", "--author",
        help="override the commit author name requires --email as well"
    )
    parser.add_argument(
        "-e", "--email", default = None,
        help="override the commit author name requires --author as well"
    )
    args = parser.parse_args()

    if (args.email == None) != (args.author == None):
        print("Need both author and email, see --help", file = sys.stderr)
        exit(1)
    author = None
    if args.email != None:
        author = Actor(name = args.author, email = args.email)

    if args.logging_level == "off":
        logging.disable(logging.CRITICAL)
    else:
        logging.basicConfig(
            stream=sys.stderr, level=args.logging_level.upper(),
            format='[%(levelname)s] %(message)s'
        )

    reader = csv.reader(sys.stdin, delimiter=',')
    writer = csv.writer(sys.stdout, delimiter=',')

    for row in reader:
        _, _, cruzid, _ = row
        if push_to_repo(args.files, cruzid, args.repodir, args.commit_message, author = author):
            writer.writerow(row)

    if args.verbose:
        print('Overall statistics:')
        for k in sorted(repo_ops.keys()):
            print(f" - {k}: {repo_ops[k]}")

if __name__ == "__main__":
    main()
