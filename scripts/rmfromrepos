#!/usr/bin/env python3

from os.path import expanduser, basename
import csv, sys, toml, gitlab, argparse, logging

SERVER = "https://git.ucsc.edu"

repo_ops = {
    "access_revoked": 0,
    "nouser": 0,
    "error": 0
}

def get_repo(gl, project_id):
    return gl.projects.get(project_id)

def validate_config(config):
    if "server" not in config:
        config["server"] = SERVER
    if "gitlab_token" not in config:
        raise ValueError("missing GitLab token")

def remove_user_from_repo(gl, repo, username):
    name = basename(repo.web_url)

    try:
        # Find user.
        user = gl.users.list(username=username)[0]
    except:
        # User doesn't exist.
        logging.warning(f"user {username} doesn\'t (yet) exist... skipping.")
        repo_ops["nouser"] += 1
        return False

    # Can only remove access to this repo if the user has access to it.
    # This either means direct access, or access through an ancestor repo.
    if repo.members.list(query=username) or repo.members.all(query=username):
        try:
            repo.members.delete(user.id)
            logging.info(f"{username} removed from {name}.")
            repo_ops["access_revoked"] += 1
        except:
            logging.error(f"unable to remove {username} from {name}.")
            repo_ops["error"] += 1
            return False

    return True

def remove_users_from_repos(gl, repoids):
    ok = True
    reader = csv.reader(sys.stdin, delimiter=',')
    writer = csv.writer(sys.stdout, delimiter=',')

    for row in reader:
        _, _, cruzid, _ = row

        for repo_id in repoids:
            repo = get_repo(gl, repo_id)
            if not repo:
                logging.error("invalid repo id")
                repo_ops["error"] += 1
                ok = False
                continue

            if not remove_user_from_repo(gl, repo, cruzid):
                ok = False

        if ok:
            writer.writerow(row)

def main():
    parser = argparse.ArgumentParser(
        formatter_class=argparse.RawTextHelpFormatter,
        description=(
            "Removes students from a set of GitLab repos.\n"
            "Reads stdin for a CSV with rows formatted as [name, CanvasID, CruzID, repo].\n"
            "Outputs CSV rows of students that were removed to stdout.\n"
        )
    )
    parser.add_argument(
        "-v", "--verbose", default=False, action="store_true",
        help="print verbose statistics to stderr"
    )
    parser.add_argument(
        "-l", "--logging-level", default="INFO",
        choices=['debug', 'info', 'warning', 'error', 'critical', 'off'],
        help="set logging level for logs to stderr (default: info)"
    )
    parser.add_argument(
        "repoids", nargs="*", default=[],
        help="list of repo project IDs to remove from"
    )
    args = parser.parse_args()

    if args.logging_level == "off":
        logging.disable(logging.CRITICAL)
    else:
        logging.basicConfig(
            stream=sys.stderr, level=args.logging_level.upper(),
            format="[%(levelname)s] %(message)s"
        )

    # Load the configuration.
    config = toml.load(f"{expanduser('~')}/.config/gcu/config.toml")

    # Validate the configuration.
    try:
        validate_config(config)
    except ValueError as err:
        logging.error(err)
        sys.exit(1)

    # Authenticate the token.
    try:
        gl = gitlab.Gitlab(config["server"], config["gitlab_token"], api_version="4")
        gl.auth()
    except:
        logging.error("invalid GitLab token")
        sys.exit(1)

    remove_users_from_repos(gl, args.repoids)

    # Print statistics of adding students to resource repo.
    if args.verbose:
        print('Overall statistics:', file=sys.stderr)
        for k in sorted(repo_ops.keys()):
            print(f" - {k}: {repo_ops[k]}", file=sys.stderr)

if __name__ == "__main__":
    main()
