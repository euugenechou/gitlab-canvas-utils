#!/usr/bin/env python3

from git import Repo, GitCommandError, InvalidGitRepositoryError
import argparse, csv, logging, os, sys

def clone_repos(csvfile, repodir):
    '''
    Clones each student repo in the CSV file.
    Repos that have already been cloned are pulled from instead.
    Repos are cloned into the specified directory.
    '''
    if not os.path.exists(repodir):
        os.makedirs(repodir)

    reader = csv.reader(csvfile, delimiter=',')
    writer = csv.writer(sys.stdout, delimiter=",")

    for row in reader:
        _, _, cruzid, repo = row
        repopath = os.path.join(repodir, cruzid)

        if not os.path.exists(repopath):
            try:
                repo_clone = Repo.clone_from(repo, repopath)
                writer.writerow(row)
                logging.info(f"{cruzid}: successfully cloned repo")
            except (GitCommandError, InvalidGitRepositoryError, UnicodeDecodeError) as err:
                logging.error(f"{cruzid}: failed to clone repo: {err}")
        else:
            try:
                repo_clone = Repo(repopath)
                repo_clone.git.checkout("master")
                repo_clone.git.pull()
                writer.writerow(row)
                logging.info(f"{cruzid}: successfully pulled repo")
            except (GitCommandError, InvalidGitRepositoryError, UnicodeDecodeError) as err:
                logging.error(f"{cruzid}: failed to pull repo: {err}")

def main():
    parser = argparse.ArgumentParser(
        formatter_class=argparse.RawTextHelpFormatter,
        description=(
            "Clones student repos given a csv.\n"
            "Each row in the csv must be formatted as: name, CanvasID, CruzID, repo.\n"
            "The rows for successfully cloned/pulled repos are output to stdout."
        )
    )
    parser.add_argument(
        "-c", "--csv", nargs="?", default=None,
        help="the CSV containing the repos to clone."
    )
    parser.add_argument(
        "-r", "--repodir", nargs="?", default="/tmp/repos",
        help="the directory to contain the cloned repos (default: /tmp/repos)."
    )
    parser.add_argument(
        "-l", "--logging-level", default="INFO",
        choices=['debug', 'info', 'warning', 'error', 'critical', 'off'],
        help="set logging level for logs to stderr (default: info)."
    )
    args = parser.parse_args()

    if args.logging_level == "off":
        logging.disable(logging.CRITICAL)
    else:
        logging.basicConfig(
            stream=sys.stderr, level=args.logging_level.upper(),
            format='[%(levelname)s] %(message)s'
        )

    # Use stdin as default input to read CSV from.
    csvfile = open(args.csv, "r") if args.csv else sys.stdin
    clone_repos(csvfile, args.repodir)

if __name__ == "__main__":
    main()
