#!/usr/bin/env python3

from git import Repo, GitCommandError, InvalidGitRepositoryError
import argparse, csv, logging, os, sys

def clone_repos(repodir):
    '''
    Clones each student repo in the CSV read from stdin.
    Repos that have already been cloned are pulled from instead.
    Repos are cloned into the specified directory.
    '''
    if not os.path.exists(repodir):
        os.makedirs(repodir)

    reader = csv.reader(sys.stdin, delimiter=',')
    writer = csv.writer(sys.stdout, delimiter=",")

    for row in reader:
        _, _, cruzid, repo = row
        repopath = os.path.join(repodir, cruzid)

        if not os.path.exists(repopath):
            try:
                repo_clone = Repo.clone_from(repo, repopath)
                writer.writerow(row)
                logging.info(f"{cruzid}: successfully cloned repo")
            except (GitCommandError, InvalidGitRepositoryError, UnicodeDecodeError) as err:
                logging.error(f"{cruzid}: failed to clone repo: {err}")
        else:
            try:
                repo_clone = Repo(repopath)
                repo_clone.git.checkout("master")
                repo_clone.git.pull()
                writer.writerow(row)
                logging.info(f"{cruzid}: successfully pulled repo")
            except (GitCommandError, InvalidGitRepositoryError, UnicodeDecodeError) as err:
                logging.error(f"{cruzid}: failed to pull repo: {err}")

def main():
    parser = argparse.ArgumentParser(
        formatter_class=argparse.RawTextHelpFormatter,
        description=(
            "Clones student repos, pulling them if already cloned.\n"
            "Reads stdin for a CSV with rows formatted as [name, CanvasID, CruzID, repo].\n"
            "Outputs CSV rows of students whose repos were cloned/pulled out to stdout.\n"
        )
    )
    parser.add_argument(
        "-r", "--repodir", nargs="?", default="/tmp/repos",
        help="the directory to contain the cloned repos (default: /tmp/repos)."
    )
    parser.add_argument(
        "-l", "--logging-level", default="INFO",
        choices=['debug', 'info', 'warning', 'error', 'critical', 'off'],
        help="set logging level for logs to stderr (default: info)."
    )
    args = parser.parse_args()

    if args.logging_level == "off":
        logging.disable(logging.CRITICAL)
    else:
        logging.basicConfig(
            stream=sys.stderr, level=args.logging_level.upper(),
            format='[%(levelname)s] %(message)s'
        )

    clone_repos(args.repodir)

if __name__ == "__main__":
    main()
