#!/usr/bin/env python3

from os.path import expanduser
import csv, sys, toml, gitlab, subprocess, argparse, logging

SERVER = "https://git.ucsc.edu"
DOMAIN = "ucsc.edu"

repo_ops = {
    "access_created": 0,
    "access_updated": 0,
    "access_removed": 0,
    "newrepo": 0,
    "nouser": 0,
    "error": 0
}

roles = {
    "developer": gitlab.DEVELOPER_ACCESS,
    "maintainer": gitlab.MAINTAINER_ACCESS,
    "owner": gitlab.OWNER_ACCESS,
    "reporter": gitlab.REPORTER_ACCESS
}

def validate_config(config):
    if "server" not in config:
        config["server"] = SERVER
    if "gitlab_token" not in config:
        raise ValueError("missing GitLab token.")
    if "base_repo_path" not in config:
        raise ValueError("missing base repo path.")
    if "template_repo" not in config:
        raise ValueError("missing template repo to import.")
    if "gitlab_role" not in config:
        raise ValueError("missing student repo role.")
    if config["gitlab_role"] not in roles:
        raise ValueError("invalid student repo role.")

def create_repo(gl, group, name, users, role, template_repo, remove_unlisted):
    success = True
    fullname = group.full_path + "/" + name

    allowed_users = []
    curr_members = None

    for username in users:
        try:
            # Find user and add to list of allowed users.
            user = gl.users.list(username=username)[0]
            allowed_users.append(user.id)

            try:
                # Try creating the repo.
                repo = gl.projects.create({
                    "name": name,
                    "namespace_id": group.id,
                    "visibility": "private",
                    "lfs_enabled": False,
                    "import_url": template_repo
                })
                logging.info(f"{fullname}: repo created.")
                repo_ops["newrepo"] += 1

            except:
                # Maybe the repo already exists?
                try:
                    repo = gl.projects.get(fullname)
                except:
                    logging.error(f"{fullname}: error creating or finding repo.")
                    repo_ops["error"] += 1
                    return False

        except:
            # User doesn't exist.
            logging.warning(f"{fullname}: user {username} doesn\'t (yet) exist... skipping.")
            repo_ops["nouser"] += 1
            success = False
            continue

        curr_members = repo.members.list()
        if user.id not in [member.id for member in curr_members]:
            try:
                member = repo.members.create({
                    "user_id": user.id,
                    "access_level": roles[role]
                })
                repo_ops["access_created"] += 1
            except:
                logging.error(f"{fullname}: unable to add {username} for access.")
                repo_ops["error"] += 1
                success = False

        try:
            member = repo.members.get(user.id)
            member.access_level = roles[role]
            member.save()
            logging.info(f"{fullname}: {username} given {role} access.")
            repo_ops["access_updated"] += 1
        except:
            logging.error(f"{fullname}: {username} not given {role} access.")
            repo_ops["error"] += 1
            success = False

    if remove_unlisted:
        for member in curr_members:
            if member.id not in allowed_users:
                try:
                    member.delete()
                    logging.info(f"{fullname}: {member.username} removed as {role}.")
                    repo_ops["access_removed"] += 1
                except:
                    logging.error(f"{fullname}: unable to remove {role} access for {member.username}.")
                    repo_ops["error"] += 1

    return success

def create_individual_repos(gl, group, template_repo, role):
    reader = csv.reader(sys.stdin, delimiter=',')
    writer = csv.writer(sys.stdout, delimiter=',')
    for row in reader:
        _, _, cruzid, _ = row
        if create_repo(gl, group, cruzid, [cruzid], role, template_repo, False):
            writer.writerow(row)

def create_shared_repos(gl, group, template_repo, role, remove_unlisted):
    reader = csv.reader(sys.stdin, delimiter=',')
    for row in reader:
        if len(row) > 1:
            groupname, cruzids = row[0], row[1:]
            create_repo(gl, group, groupname, cruzids, role, template_repo, remove_unlisted)
        else:
            logging.error(f"{row[0]}: no users specified for shared repo")

def group_search(user, path):
    for group in user.groups.list():
        if group.full_path == path:
            return group
    logging.warning(f"{path}: group not found.")
    return None

def subgroup_search(user, group, path):
    for subgroup in group.subgroups.list():
        if subgroup.path == path and subgroup.parent_id == group.id:
            return user.groups.get(subgroup.id)
    logging.warning(f"{group.full_path}/{path}: subgroup not found.")
    return None

def group_check(user, course):
    group = group_search(user, course)
    group_name = course.upper()

    if not group:
        user.groups.create({
            'name': group_name,
            'path': course,
        })

        while not group:
            group = group_search(user, course)

        logging.info(f"{group.full_path}: group created.")

    settings = group.notificationsettings.get()
    settings.level = gitlab.NOTIFICATION_LEVEL_DISABLED
    settings.save()
    logging.info(f"{group.full_path}: group notifications disabled.")
    return group

def subgroup_check(user, group, path):
    subgroup = subgroup_search(user, group, path)

    if not subgroup:
        user.groups.create({
            'name': path,
            'path': path,
            'parent_id': group.id
        })

        while not subgroup:
            subgroup = subgroup_search(user, group, path)

        logging.info(f"{subgroup.full_path}: subgroup created.")

    settings = subgroup.notificationsettings.get()
    settings.level = gitlab.NOTIFICATION_LEVEL_DISABLED
    settings.save()
    logging.info(f"{subgroup.full_path}: subgroup notifications disabled.")

    return subgroup

def course_check(user, course, subgroups):
    group = group_check(user, course)
    for subgroup in subgroups:
        group = subgroup_check(user, group, subgroup)
    return group

def parse_base_repo_path(path):
    components = path.split("/")
    return (components[0], components[1:])

def main():
    parser = argparse.ArgumentParser(
        formatter_class=argparse.RawTextHelpFormatter,
        description=(
            "Creates GitLab repos for students.\n"
            "The repos are created under the configured base repo path.\n"
            "The group and subgroups in the path are created if they don't exist.\n"
            "Supports the creation of both individual repos and shared repos.\n"
            "Reads stdin for a CSV with rows formatted as [name, CanvasID, CruzID, repo].\n"
            "Outputs CSV rows of students whose repos were created out to stdout.\n"
            "Row output only occurs when creating individual repos."
        )
    )
    parser.add_argument(
        "-s", "--shared", default=False, action="store_true",
        help="create shared repos for students instead of individual repos"
    )
    parser.add_argument(
        "-r", "--remove-unlisted", default=False, action="store_true",
        help="remove unlisted students from shared repos if any are found"
    )
    parser.add_argument(
        "-v", "--verbose", default=False, action="store_true",
        help="print verbose statistics to stderr"
    )
    parser.add_argument(
        "-l", "--logging-level", default="INFO",
        choices=['debug', 'info', 'warning', 'error', 'critical', 'off'],
        help="set logging level for logs to stderr (default: info)"
    )
    args = parser.parse_args()

    if args.logging_level == "off":
        logging.disable(logging.CRITICAL)
    else:
        logging.basicConfig(
            stream=sys.stderr, level=args.logging_level.upper(),
            format='[%(levelname)s] %(message)s'
        )

    # Load the configuration.
    config = toml.load(f"{expanduser('~')}/.config/gcu/config.toml")

    # Validate the configuration.
    try:
        validate_config(config)
    except ValueError as err:
        logging.error(err)
        sys.exit(1)

    # Authenticate the token.
    try:
        user = gitlab.Gitlab(config["server"], config["gitlab_token"], api_version="4")
        user.auth()
    except:
        logging.error("invalid GitLab token.")
        sys.exit(1)

    # Validate the template repo to import.
    try:
        subprocess.check_call(["git", "ls-remote", config["template_repo"]],
            stdout=subprocess.DEVNULL, stderr=subprocess.DEVNULL)
    except:
        logging.error("unable to import template repo.")
        sys.exit(1)

    # Parse out course and subgroup components.
    course, subgroups = parse_base_repo_path(config["base_repo_path"])

    # Check if group and subgroup for class exist, create if they don't.
    try:
        course = course_check(user, course, subgroups)
    except:
        logging.error("unable to find or create GitLab course.")
        sys.exit(1)

    # Unpack some config parameters.
    template_repo = config["template_repo"]
    gitlab_role = config["gitlab_role"]

    # Repos are either shared or not shared at this point.
    if args.shared:
        create_shared_repos(user, course, template_repo, gitlab_role, args.remove_unlisted)
    else:
        create_individual_repos(user, course, template_repo, gitlab_role)

    # Print statistics of repo creation.
    if args.verbose:
        print('Overall statistics:', file=sys.stderr)
        for k in sorted(repo_ops.keys()):
            print(f" - {k}: {repo_ops[k]}", file=sys.stderr)

if __name__ == "__main__":
    main()
